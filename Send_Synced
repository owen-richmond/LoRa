// Sender.ino
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <LoRa.h>
#include "Timer.h"

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// LoRa settings
#define SS 18
#define RST 14
#define DIO0 26

// Button pin for wake-up
#define BUTTON_PIN 0

// Timing settings
#define SLEEP_INTERVAL 30 * 60 // 30 minutes
#define SEND_INTERVAL 60       // 1 minute
#define LISTEN_PERIOD 5        // 5 seconds

// Function prototypes
void goToSleep();
void setupLoRa();
void sendData(const Timer& timer);
bool receiveConfirmation(const Timer& timer);

void setup() {
    Serial.begin(115200);
    pinMode(BUTTON_PIN, INPUT_PULLUP);

    // Initialize OLED
    if (!display.begin(SSD1306_I2C_ADDRESS, OLED_RESET)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }

    // Show initial message
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println(F("LoRa Sender"));
    display.display();

    // Initialize LoRa
    setupLoRa();

    // Get current time
    time_t currentTime = time(nullptr);
    Timer timer(currentTime, SLEEP_INTERVAL, SEND_INTERVAL, 0);

    // Main loop
    while (true) {
        // Send data and wait for confirmation
        sendData(timer);
        if (receiveConfirmation(timer)) {
            display.clearDisplay();
            display.setCursor(0, 0);
            display.println(F("Data confirmed"));
            display.display();
            break;
        }
        delay(LISTEN_PERIOD * 1000); // Wait for listen period
    }

    goToSleep();
}

void loop() {
    // Empty loop since the main logic is in setup()
}

void goToSleep() {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(F("Going to sleep..."));
    display.display();

    // Go to deep sleep
    esp_sleep_enable_ext0_wakeup(GPIO_NUM_0, 0); // Wake up on button press
    esp_deep_sleep_start();
}

void setupLoRa() {
    LoRa.setPins(SS, RST, DIO0);
    if (!LoRa.begin(433E6)) { // Use 433 MHz
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println(F("LoRa init failed"));
        display.display();
        while (1);
    }
    LoRa.setSpreadingFactor(12); // Conservative spreading factor
    LoRa.setSignalBandwidth(125E3); // Conservative bandwidth
    LoRa.setTxPower(20); // Maximum power for long distance
}

void sendData(const Timer& timer) {
    uint8_t data[sizeof(Timer)];
    timer.serialize(data);
    LoRa.beginPacket();
    LoRa.write(data, sizeof(data));
    LoRa.endPacket();

    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(F("Data sent:"));
    display.println(timer.getTimeString(timer.getCurrentTime()));
    display.display();
}

bool receiveConfirmation(const Timer& timer) {
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
        uint8_t receivedData[sizeof(Timer)];
        int i = 0;
        while (LoRa.available()) {
            receivedData[i++] = LoRa.read();
        }

        Timer receivedTimer(receivedData);
        if (timer.getCurrentTime() == receivedTimer.getCurrentTime() &&
            timer.getMessageInterval() == receivedTimer.getMessageInterval() &&
            timer.getWaitTime() == receivedTimer.getWaitTime() &&
            timer.getSleepState() == receivedTimer.getSleepState()) {
            return true;
        }
    }
    return false;
}
